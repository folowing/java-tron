plugins {
    id "org.sonarqube" version "2.6"
}

apply plugin: 'application'
apply plugin: 'checkstyle'

jacoco {
    toolVersion = "0.8.4"
}
def versions = [
        checkstyle: '8.7',
]
mainClassName = 'org.tron.plugins.ArchiveManifest'
group 'org.tron'
version '1.0.0'

configurations {
    checkstyleConfig
}

configurations.getByName('checkstyleConfig') {
    transitive = false
}

dependencies {
    //local libraries
    // implementation fileTree(dir: 'libs', include: '*.jar')
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.13.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-junit', version: '1.0.0.1'
    testImplementation group: 'org.testng', name: 'testng', version: '6.14.3'
    implementation group: 'info.picocli', name: 'picocli', version: '4.6.3'
    implementation group: 'com.typesafe', name: 'config', version: '1.3.2'
    implementation group: 'me.tongfei', name: 'progressbar', version: '0.9.3'


    implementation 'com.github.halibobo1205.leveldb-java:leveldb:v0.12.5'
    implementation 'com.github.halibobo1205.leveldb-java:leveldb-api:v0.12.5'
}

check.dependsOn 'lint'

checkstyle {
    toolVersion = "${versions.checkstyle}"
    configFile = file("../framework/config/checkstyle/checkStyleAll.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

task lint(type: Checkstyle) {
    // Cleaning the old log because of the creation of the new ones (not sure if totaly needed)
    delete fileTree(dir: "${project.rootDir}/app/build/reports")
    source 'src'
    include '**/*.java'
    exclude 'main/gen/**'
    exclude 'test/**'
    // empty classpath
    classpath = files()
    //Failing the build
    ignoreFailures = false
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

if (project.hasProperty("mainClass")) {
    mainClassName = mainClass
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    executionData.from = 'build/jacoco/jacocoTest.exec'
}

def binaryRelease(taskName, jarName, mainClass) {
    return tasks.create("${taskName}", Jar) {
        baseName = jarName
        version = null
        from(sourceSets.main.output) {
            include "/**"
        }

        from {
            configurations.runtimeClasspath.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        manifest {
            attributes "Main-Class": "${mainClass}"
        }
        duplicatesStrategy = 'include'
    }
}

def createScript(project, mainClass, name) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        outputDir = new File(project.buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtimeClasspath
    }
    project.tasks[name].dependsOn(project.jar)
    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}
applicationDistribution.from("../gradle/java-tron.vmoptions") {
    into "bin"
}
//createScript(project, 'org.tron.plugins.ArchiveManifest', 'ArchiveManifest')
//createScript(project, 'org.tron.plugins.Toolkit', 'Toolkit')

def releaseBinary = hasProperty('binaryRelease') ? getProperty('binaryRelease') : 'true'
if (releaseBinary == 'true') {
    artifacts {
        archives(
                binaryRelease('buildArchiveManifestJar', 'ArchiveManifest', 'org.tron.plugins.ArchiveManifest'),
                binaryRelease('buildToolkitJar', 'Toolkit', 'org.tron.plugins.Toolkit'))
    }
}

task copyToParent(type: Copy) {
    into "../build/distributions"
    from "$buildDir/distributions"
    include "*.zip"
}



build.finalizedBy(copyToParent)